{"remainingRequest":"F:\\Project\\vue-router-auto\\node_modules\\babel-loader\\lib\\index.js!F:\\Project\\vue-router-auto\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!F:\\Project\\vue-router-auto\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\Project\\vue-router-auto\\src\\views\\pages\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\Project\\vue-router-auto\\src\\views\\pages\\index.vue","mtime":1632064218345},{"path":"F:\\Project\\vue-router-auto\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1631353801030},{"path":"F:\\Project\\vue-router-auto\\node_modules\\babel-loader\\lib\\index.js","mtime":1631353804156},{"path":"F:\\Project\\vue-router-auto\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1631353801030},{"path":"F:\\Project\\vue-router-auto\\node_modules\\vue-loader\\lib\\index.js","mtime":1631353805156}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8gQCBpcyBhbiBhbGlhcyB0byAvc3JjCmltcG9ydCBzcGVha2Vhc3kgZnJvbSAnc3BlYWtlYXN5JzsKaW1wb3J0IFFSQ29kZSBmcm9tICdxcmNvZGUnOwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ2hvbWUnLAogIGNvbXBvbmVudHM6IHt9LAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBpczJmYTogZmFsc2UsCiAgICAgIHNlY3JldENvZGU6ICcnLAogICAgICBxckNvZGU6ICcnLAogICAgICBydWxlczogW2Z1bmN0aW9uICh2YWx1ZSkgewogICAgICAgIHJldHVybiAhIXZhbHVlIHx8ICdSZXF1aXJlZC4nOwogICAgICB9LCBmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICB2YXIgcGF0dGVybiA9IC9eXGQrJC87CiAgICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdCh2YWx1ZSkgfHwgJ0ludmFsaWQgT1RQLic7CiAgICAgIH0sIGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICAgIHJldHVybiAodmFsdWUgfHwgJycpLmxlbmd0aCA9PT0gNiB8fCAnTXVzdCA2IGRpZ2l0cyc7CiAgICAgIH1dLAogICAgICBvdHA6ICcnCiAgICB9OwogIH0sCiAgbWV0aG9kczogewogICAgZ2VuZXJhdGVfMmZhOiBmdW5jdGlvbiBnZW5lcmF0ZV8yZmEoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB0aGlzLnNlY3JldENvZGUgPSBzcGVha2Vhc3kuZ2VuZXJhdGVTZWNyZXQoewogICAgICAgIGxlbmd0aDogNTEyLAogICAgICAgIG5hbWU6ICdUZXN0IEdvb2dsZSBBdXRoZW50aWNhdG9yICh0ZXN0QGVtYWlsLmNvbSknCiAgICAgIH0pOwogICAgICB2YXIgb3RwYXV0aF91cmwgPSBzcGVha2Vhc3kub3RwYXV0aFVSTCh7CiAgICAgICAgc2VjcmV0OiB0aGlzLnNlY3JldENvZGUub3RwYXV0aF91cmwsCiAgICAgICAgbGFiZWw6ICd0ZXN0QGVtYWlsLmNvbScsCiAgICAgICAgdHlwZTogJ3RvdHAnLAogICAgICAgIGlzc3VlcjogJ1Rlc3QgR29vZ2xlIEF1dGhlbnRpY2F0b3InLAogICAgICAgIGFsZ29yaXRobTogJ3NoYTUxMicsCiAgICAgICAgZW5jb2Rpbmc6ICdiYXNlNjQnCiAgICAgIH0pOyAvLyBHZXQgdGhlIGRhdGEgVVJMIG9mIHRoZSBhdXRoZW50aWNhdG9yIFVSTAoKICAgICAgUVJDb2RlLnRvRGF0YVVSTChvdHBhdXRoX3VybCwgZnVuY3Rpb24gKGVyciwgZGF0YV91cmwpIHsKICAgICAgICBfdGhpcy5xckNvZGUgPSBkYXRhX3VybDsKICAgICAgfSk7CiAgICB9LAogICAgdmVyaWZ5OiBmdW5jdGlvbiB2ZXJpZnkoKSB7CiAgICAgIHZhciByZXN1bHQgPSBzcGVha2Vhc3kudG90cC52ZXJpZnkoewogICAgICAgIHNlY3JldDogdGhpcy5zZWNyZXRDb2RlLm90cGF1dGhfdXJsLAogICAgICAgIHRva2VuOiB0aGlzLm90cCwKICAgICAgICBhbGdvcml0aG06ICdzaGE1MTInLAogICAgICAgIGVuY29kaW5nOiAnYmFzZTY0JwogICAgICB9KTsKICAgICAgYWxlcnQocmVzdWx0KTsKICAgIH0KICB9Cn07"},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkEA;AACA,OAAA,SAAA,MAAA,WAAA;AACA,OAAA,MAAA,MAAA,QAAA;AACA,eAAA;AACA,EAAA,IAAA,EAAA,MADA;AAEA,EAAA,UAAA,EAAA,EAFA;AAKA,EAAA,IALA,kBAKA;AACA,WAAA;AACA,MAAA,KAAA,EAAA,KADA;AAEA,MAAA,UAAA,EAAA,EAFA;AAGA,MAAA,MAAA,EAAA,EAHA;AAIA,MAAA,KAAA,EAAA,CACA,UAAA,KAAA;AAAA,eAAA,CAAA,CAAA,KAAA,IAAA,WAAA;AAAA,OADA,EAEA,UAAA,KAAA,EAAA;AACA,YAAA,OAAA,GAAA,OAAA;AACA,eAAA,OAAA,CAAA,IAAA,CAAA,KAAA,KAAA,cAAA;AACA,OALA,EAMA,UAAA,KAAA;AAAA,eAAA,CAAA,KAAA,IAAA,EAAA,EAAA,MAAA,KAAA,CAAA,IAAA,eAAA;AAAA,OANA,CAJA;AAYA,MAAA,GAAA,EAAA;AAZA,KAAA;AAcA,GApBA;AAqBA,EAAA,OAAA,EAAA;AACA,IAAA,YADA,0BACA;AAAA;;AACA,WAAA,UAAA,GAAA,SAAA,CAAA,cAAA,CAAA;AACA,QAAA,MAAA,EAAA,GADA;AAEA,QAAA,IAAA,EAAA;AAFA,OAAA,CAAA;AAKA,UAAA,WAAA,GAAA,SAAA,CAAA,UAAA,CAAA;AACA,QAAA,MAAA,EAAA,KAAA,UAAA,CAAA,WADA;AAEA,QAAA,KAAA,EAAA,gBAFA;AAGA,QAAA,IAAA,EAAA,MAHA;AAIA,QAAA,MAAA,EAAA,2BAJA;AAKA,QAAA,SAAA,EAAA,QALA;AAMA,QAAA,QAAA,EAAA;AANA,OAAA,CAAA,CANA,CAeA;;AACA,MAAA,MAAA,CAAA,SAAA,CAAA,WAAA,EAAA,UAAA,GAAA,EAAA,QAAA,EAAA;AACA,QAAA,KAAA,CAAA,MAAA,GAAA,QAAA;AACA,OAFA;AAGA,KApBA;AAqBA,IAAA,MArBA,oBAqBA;AACA,UAAA,MAAA,GAAA,SAAA,CAAA,IAAA,CAAA,MAAA,CAAA;AACA,QAAA,MAAA,EAAA,KAAA,UAAA,CAAA,WADA;AAEA,QAAA,KAAA,EAAA,KAAA,GAFA;AAGA,QAAA,SAAA,EAAA,QAHA;AAIA,QAAA,QAAA,EAAA;AAJA,OAAA,CAAA;AAMA,MAAA,KAAA,CAAA,MAAA,CAAA;AACA;AA7BA;AArBA,CAAA","sourcesContent":["<template>\n  <v-container>\n      <v-row class=\"text-center\">\n        <v-col cols=\"12\">\n          <v-btn block x-large color=\"primary\" @click=\"generate_2fa\">Generate 2FA</v-btn>\n          <div v-if=\"secretCode\">\n            <img v-if=\"true\" :src=\"qrCode\" class=\"img-fluid\" alt=\"\">\n            <v-card class=\"justify-center d-flex mx-auto mt-5\">\n              <v-card-text>\n                <div class=\"font-weight-bold ml-8 h3 mb-2 text-dark\">\n                  Secret Code\n                </div>\n\n                <v-timeline align-top dense>\n                  <v-timeline-item color=\"red\" small>\n                    <div class=\"text-justify text-dark\">\n                      <div class=\"font-weight-normal\">\n                        <strong>ASCII</strong>\n                      </div>\n                      <div>{{secretCode.ascii}}</div>\n                    </div>\n                  </v-timeline-item>\n                </v-timeline>\n                <v-timeline align-top dense>\n                  <v-timeline-item color=\"red\" small>\n                    <div class=\"text-justify text-dark\">\n                      <div class=\"font-weight-normal\">\n                        <strong>HEX</strong>\n                      </div>\n                      <div>{{secretCode.hex}}</div>\n                    </div>\n                  </v-timeline-item>\n                </v-timeline>\n                <v-timeline align-top dense>\n                  <v-timeline-item color=\"red\" small>\n                    <div class=\"text-justify text-dark\">\n                      <div class=\"font-weight-normal\">\n                        <strong>Base 32</strong>\n                      </div>\n                      <div>{{secretCode.base32}}</div>\n                    </div>\n                  </v-timeline-item>\n                </v-timeline>\n                <v-timeline align-top dense>\n                  <v-timeline-item color=\"red\" small>\n                    <div class=\"text-justify text-dark\">\n                      <div class=\"font-weight-normal\">\n                        <strong>OTP Auth URL</strong>\n                      </div>\n                      <div>{{secretCode.otpauth_url}}</div>\n                    </div>\n                  </v-timeline-item>\n                </v-timeline>\n\n              </v-card-text>\n            </v-card>\n            \n          </div>\n          <v-text-field label=\"Verify OTP\" :rules=\"rules\" hide-details=\"auto\" class=\"my-3\" v-model=\"otp\"></v-text-field>\n          <v-btn class=\"w-50\" x-large color=\"primary\" @click=\"verify\">Verify</v-btn>\n        </v-col>\n      </v-row>\n  </v-container>\n</template>\n\n<script>\n// @ is an alias to /src\nimport speakeasy from 'speakeasy'\nimport QRCode from 'qrcode'\nexport default {\n  name: 'home',\n  components: {\n    \n  },\n  data() {\n    return {\n      is2fa: false,\n      secretCode: '',\n      qrCode: '',\n      rules: [\n        value => !!value || 'Required.',        \n        value => {\n          const pattern = /^\\d+$/\n          return pattern.test(value) || 'Invalid OTP.'\n        },\n        value => (value || '').length === 6 || 'Must 6 digits',\n      ],\n      otp: ''\n    }\n  },\n  methods: {\n    generate_2fa() {\n      this.secretCode = speakeasy.generateSecret({\n        length: 512,\n        name: 'Test Google Authenticator (test@email.com)'\n      });\n\n      let otpauth_url = speakeasy.otpauthURL({\n        secret: this.secretCode.otpauth_url,\n        label: 'test@email.com',\n        type: 'totp',\n        issuer: 'Test Google Authenticator',\n        algorithm: 'sha512',\n        encoding: 'base64'\n      })\n\n      // Get the data URL of the authenticator URL\n      QRCode.toDataURL(otpauth_url, (err, data_url) => {\n        this.qrCode = data_url\n      });\n    },\n    verify(){\n      let result = speakeasy.totp.verify({\n        secret: this.secretCode.otpauth_url,\n        token: this.otp,\n        algorithm: 'sha512',\n        encoding: 'base64'\n      })\n      alert(result)\n    }\n  },\n}\n</script>\n<style scoped>\n\n</style>"],"sourceRoot":"src/views/pages"}]}